rmse(testSet$capital_run_length_total, ridge.pred)
predict(ridge.mod, type = "coefficients", s = bestlam)
##LASSO Model##
lasso.mod <- glmnet(x, y, alpha = 1, standardize = FALSE)
#find the best lambda via cross-validation
cv.out2 <- cv.glmnet(x,y,alpha = 1, standardize = FALSE)
bestlam2 <- cv.out2$lambda.min
bestlam2
lasso.pred <- predict(lasso.mod, s = bestlam, newx = newX)
lasso.pred2 <- predict(lasso.mod, s = bestlam, newx = x) #train
rmse <- function(response, predicted){sqrt(mean((response-predicted)^2))}
rmse(trainingSet$capital_run_length_total, lasso.pred2) #RMSE in training
rmse(testSet$capital_run_length_total, lasso.pred) #RMSE in testing
predict(lasso.mod, type = "coefficients", s = bestlam)
##LASSO Model##
lasso.mod <- glmnet(x, y, alpha = 1, standardize = TRUE)
#find the best lambda via cross-validation
cv.out2 <- cv.glmnet(x,y,alpha = 1, standardize = TRUE)
bestlam2 <- cv.out2$lambda.min
bestlam2
lasso.pred <- predict(lasso.mod, s = bestlam, newx = newX)
lasso.pred2 <- predict(lasso.mod, s = bestlam, newx = x) #train
rmse <- function(response, predicted){sqrt(mean((response-predicted)^2))}
rmse(trainingSet$capital_run_length_total, lasso.pred2) #RMSE in training
rmse(testSet$capital_run_length_total, lasso.pred) #RMSE in testing
predict(lasso.mod, type = "coefficients", s = bestlam)
##LASSO Model##
lasso.mod <- glmnet(x, y, alpha = 1, standardize = FALSE)
#find the best lambda via cross-validation
cv.out2 <- cv.glmnet(x,y,alpha = 1, standardize = FALSE)
bestlam2 <- cv.out2$lambda.min
bestlam2
lasso.pred <- predict(lasso.mod, s = bestlam, newx = newX)
lasso.pred2 <- predict(lasso.mod, s = bestlam, newx = x) #train
rmse <- function(response, predicted){sqrt(mean((response-predicted)^2))}
rmse(trainingSet$capital_run_length_total, lasso.pred2) #RMSE in training
rmse(testSet$capital_run_length_total, lasso.pred) #RMSE in testing
predict(lasso.mod, type = "coefficients", s = bestlam)
summary(lasso.mod)
View(trainingSet)
View(trainingSet)
## Example 2
Porsche <- read.csv('Porsche.csv', header=TRUE)
PorscheMod <- lm(Price~Mileage, data=sharkDat)
View(Porsche)
## Example 2
Porsche <- read.csv('Porsche.csv', header=TRUE)
PorscheMod <- lm(Porsche$Price....~Porsche$Mileage..miles., data=Porsche)
## Example 2
Porsche <- read.csv('Porsche.csv', header=TRUE)
PorscheMod <- lm(Porsche$Price....~Porsche$Mileage..miles., data=Porsche)
summary(PorscheMod)
par(mfrow=c(1,1))
pred <- predict(PorscheMod, new=data.frame(Mileage..miles.=new.x), interval="pred",
level=.98)
par(mfrow=c(1,1))
pred <- predict(PorscheMod, new=data.frame(Mileage..miles.= new.x), interval="pred",
level=.98)
View(Porsche)
par(mfrow=c(1,1))
pred <- predict(PorscheMod, new=data.frame(Porsche$Mileage..miles.= new.x), interval="pred",
par(mfrow=c(1,1))
pred <- predict(PorscheMod, new=data.frame(Porsche$Mileage..miles.), interval="pred",
level=.98)
plot(Porsche$Mileage..miles., Porsche$Price...., main="Porsche Information Model Prediction Band",
xlab="Mileage (miles)", ylab="Price ($)", pch=20, col="lightgray")
lines(new.x,pred[,"fit"])
par(mfrow=c(1,1))
pred <- predict(PorscheMod, new=data.frame(Porsche$Mileage..miles.), interval="pred",
level=.98)
plot(Porsche$Mileage..miles., Porsche$Price...., main="Porsche Information Model Prediction Band",
xlab="Mileage (miles)", ylab="Price ($)", pch=20, col="lightgray")
lines(new,pred[,"fit"])
par(mfrow=c(1,1))
pred <- predict(PorscheMod, new=data.frame(Porsche$Mileage..miles.=new.x), interval="pred",
par(mfrow=c(1,1))
new.x <- seq(min(Porsche$Mileage..miles.), max(Porsche$Mileage..miles.), length=100)
pred <- predict(PorcheMod, new=data.frame(Porsche$Mileage..miles.=new.x), interval="conf",
par(mfrow=c(1,1))
new.x <- seq(min(Porsche$Mileage..miles.), max(Porsche$Mileage..miles.), length=100)
pred <- predict(PorcheMod, new=data.frame((Porsche$Mileage..miles.)=(new.x)), interval="conf",
## Example 2
Porsche <- read.csv('Porsche.csv', header=TRUE)
PorscheMod <- lm(Porsche$Price....~Porsche$Mileage..miles., data=Porsche)
summary(PorscheMod)
par(mfrow=c(1,1))
pred <- predict(PorscheMod, new=data.frame(Porsche$Mileage..miles.= new.x), interval="pred",
par(mfrow=c(1,1))
new.x <- seq(min(Porsche$Mileage..miles.), max(Porsche$Mileage..miles.), length=100)
pred <- predict(PorcheMod, new=data.frame((Porsche$Mileage..miles.)=(new.x)), interval="conf",
par(mfrow=c(1,1))
new.x <- seq(min(Porsche$Mileage..miles.), max(Porsche$Mileage..miles.), length=100)
pred <- predict(PorcheMod, new=data.frame((Mileage..miles.)=(new.x)), interval="conf",
par(mfrow=c(1,1))
new.x <- seq(min(Porsche$Mileage..miles.), max(Porsche$Mileage..miles.), length=100)
pred <- predict(PorcheMod, new=data.frame(Mileage..miles.=(new.x)), interval="conf",
level=.98)
Years <- c(0, 2, 4, 6, 8, 12, 17, 22, 28, 34)
Number <- c(17, 33, 19, 25, 18, 60, 58, 31, 34, 19)
ThirdQ <- c(101300, 111303, 98000, 124000, 128475, 117410, 115410, 134300,
128066, 164700)
fullProfSalaries <- data.frame(Years, Number, ThirdQ)
Years <- c(0, 2, 4, 6, 8, 12, 17, 22, 28, 34)
Number <- c(17, 33, 19, 25, 18, 60, 58, 31, 34, 19)
ThirdQ <- c(101300, 111303, 98000, 124000, 128475, 117410, 115410, 134300,
128066, 164700)
fullProfSalaries <- data.frame(Years, Number, ThirdQ)
RBData <- read.csv('Latour.csv', header=TRUE)
plot(ThirdQ, Years, main="Professor Information", xlab="3rd quarter salaries ($)", ylab="Years of exp. as a full prof")
plot(Years, ThirdQ, main="Professor Information", xlab="Years of exp. as a full prof", ylab="3rd quarter salaries ($)")
plot(Years, ThirdQ, main="Professor Information", xlab="experience as a full prof (year(s))", ylab="3rd quarter salaries ($)")
pfMod <- lm(ThirdQ~Years)
pfMod <- lm(ThirdQ~Years)
summary(pfMod)
plot(Years, ThirdQ, main="Professor Information", xlab="experience as a full prof (year(s))", ylab="3rd quarter salaries ($)")
knitr::opts_chunk$set(echo = TRUE)
plot(secExp$Dose, secExp$Yield,
main="Salmonella Experiment 2",
xlab="Dose",
ylab="Yield (# colonies)")
knitr::opts_chunk$set(echo = TRUE)
#set to the folder where the datasets for the assignment are saved
setwd('C:/Users/heyman/Desktop/2019Term2 MA485/Homework/HW5')
knitr::opts_chunk$set(echo = TRUE)
#set to the folder where the datasets for the assignment are saved
destroyer <- read.csv ('destroyer.csv', header=TRUE)
knitr::opts_chunk$set(echo = TRUE)
#set to the folder where the datasets for the assignment are saved
destroyer <- read.csv ('destroyer.csv', header=TRUE)
salmonella <- read.csv('salmonella.csv', header=TRUE)
pairs(~StarboardRPM+PortRPM+HPMain+HPCollective, data=destroyer)
plot(destroyer$HPMain, destroyer$PortRPM,
main="Destroyer Ship Performance",
xlab="Main Engine HP",
ylab="Port Propeller RPM",
pch=20)
plot(sqrt(destroyer$HPMain), destroyer$PortRPM,
main="Destroyer Ship Performance",
xlab="sqrt(Main Engine HP)",
ylab="Port Propeller RPM",
pch=20)
shipMod <- lm(PortRPM~sqrt(HPMain), data=destroyer)
summary(shipMod)
par(mfrow=c(2,2))
plot(shipMod)
plot(destroyer$HPMain, destroyer$PortRPM,
main="Destroyer Ship Performance",
xlab="Main Engine HP",
ylab="Port Propeller RPM",
pch=as.numeric(destroyer$HullCondition))
legend("bottomright", legend=unique(destroyer$HullCondition),
pch=as.numeric(unique(destroyer$HullCondition)))
plot(sqrt(destroyer$HPMain), destroyer$PortRPM,
main="Destroyer Ship Performance",
xlab="sqrt(Main Engine HP)",
ylab="Port Propeller RPM",
pch=as.numeric(destroyer$HullCondition))
legend("bottomright", legend=unique(destroyer$HullCondition),
pch=as.numeric(unique(destroyer$HullCondition)))
shipMod2 <- lm(PortRPM~sqrt(HPMain)+HullCondition, data=destroyer)
summary(shipMod2)
par(mfrow=c(2,2))
plot(shipMod2)
shipMod3 <- lm(PortRPM~I(HPMain^(1/3))+HullCondition, data=destroyer)
par(mfrow=c(2,2))
plot(shipMod3)
firstExp <- salmonella[salmonella$Day==1, ]
secExp <- salmonella[salmonella$Day==2, ]
plot(firstExp$Dose, firstExp$Yield,
main="Salmonella Experiment 1",
xlab="Dose",
ylab="Yield (# colonies)")
library(MASS)
doseMod <- lm(Yield~Dose, data=firstExp)
boxcox(doseMod, lambda=seq(-0.2, 5, by=0.05), plotit=T)
Y32 <- firstExp$Yield^(3/2)
doseModB <- lm(Y32~firstExp$Dose)
summary(doseModB)
par(mfrow=c(1,2))
plot(doseModB, which=c(2,1))
plot(secExp$Dose, secExp$Yield,
main="Salmonella Experiment 2",
xlab="Dose",
ylab="Yield (# colonies)")
wtMod <- lm(Yield~Dose, data=secExp, weights=sqrt(Dose) )
par(mfrow=c(1,2))
plot(wtMod, which=c(2,1))
plot(fullProfSalaries$Years, fullProfSalaries$ThirdQ, main="Professor Information", xlab="experience as a full prof (year(s))", ylab="3rd quarter salaries ($)")
pfMod <- lm(ThirdQ~Years,data=fullProfSalaries)
summary(pfMod)
plot(fullProfSalaries$Number, fullProfSalaries$ThirdQ, main="Professor Information", xlab="experience as a full prof (year(s))", ylab="3rd quarter salaries ($)")
plot(fullProfSalaries$Number, fullProfSalaries$ThirdQ, main="Professor Information", xlab="Number responding to the survey", ylab="3rd quarter salaries ($)")
wtMod <- lm(ThirdQ~Years, data=fullProfSalaries, weights=sqrt(Number) )
wtMod <- lm(ThirdQ~Years, data=fullProfSalaries, weights=sqrt(Number) )
summary(wtMod)
wtMod <- lm(ThirdQ~Years, data=fullProfSalaries, weights=(Number) )
summary(wtMod)
wtMod <- lm(ThirdQ~Years, data=fullProfSalaries, weights=1/(Number) )
summary(wtMod)
1517.3*(6)+103914.6
latour <- read.csv('Latour.csv', header=TRUE)
plot(latour$EndofHarvest , latour$Quality, main="The harvest information of grapes in Chateau Latour", xlab="Time interval till the harvest(Day(s))", ylab="Wine quality (unit)",col=c(1,2)[latour$Rain],pch=c(20,5)[latour$Rain])
legend("topleft",c("Gothic","Romanesque"),col=c(1,2),pch=c(20,5))
plot(latour$EndofHarvest , latour$Quality, main="The harvest information of grapes in Chateau Latour", xlab="Time interval till the harvest(Day(s))", ylab="Wine quality (unit)",col=c(1,2)[latour$Rain+1],pch=c(20,5)[latour$Rain+1])
legend("topleft",c("Gothic","Romanesque"),col=c(1,2),pch=c(20,5))
plot(latour$EndofHarvest , latour$Quality, main="The harvest information of grapes in Chateau Latour", xlab="Time interval till the harvest(Day(s))", ylab="Wine quality (unit)",col=c(1,2)[latour$Rain+1],pch=c(20,5)[latour$Rain+1])
legend("bottomleft",c("Gothic","Romanesque"),col=c(1,2),pch=c(20,5))
plot(latour$EndofHarvest , latour$Quality, main="The harvest information of grapes in Chateau Latour", xlab="Time interval till the harvest(Day(s))", ylab="Wine quality (unit)",col=c(1,2)[latour$Rain+1],pch=c(20,5)[latour$Rain+1])
legend("bottomleft",c("No Unwanted Rain","Unwanted Rain Happened"),col=c(1,2),pch=c(20,5))
plot(latour$Vintage , latour$Quality, main="The harvest information of grapes in Chateau Latour", xlab="Time interval till the harvest(Day(s))", ylab="Wine quality (unit)",col=c(1,2)[latour$Rain+1],pch=c(20,5)[latour$Rain+1])
legend("bottomleft",c("No Unwanted Rain","Unwanted Rain Happened"),col=c(1,2),pch=c(20,5))
plot(latour$Vintage , latour$Quality, main="The harvest information of grapes in Chateau Latour", xlab="Time interval till the harvest(Day(s))", ylab="Wine quality (unit)",col=c(1,2)[latour$Rain+1],pch=c(20,5)[latour$Rain+1])
plot(latour$EndofHarvest , latour$Quality, main="The harvest information of grapes in Chateau Latour", xlab="Time length of the harvest(Day(s))", ylab="Wine quality (unit)",col=c(1,2)[latour$Rain+1],pch=c(20,5)[latour$Rain+1])
legend("bottomleft",c("No Unwanted Rain","Unwanted Rain Happened"),col=c(1,2),pch=c(20,5))
plot(latour$Vintage , latour$Quality, main="The harvest information of grapes in Chateau Latour", xlab="Time interval till the harvest(Day(s))", ylab="Wine quality (unit)",col=c(1,2)[latour$Rain+1],pch=c(20,5)[latour$Rain+1])
plot(latour$Vintage , latour$Quality, main="The harvest information of grapes in Chateau Latour", xlab="Time length of the harvest(Day(s))", ylab="Wine quality (unit)",col=c(1,2)[latour$Rain+1],pch=c(20,5)[latour$Rain+1])
plot(latour$Vintage , latour$Quality, main="The harvest information of grapes in Chateau Latour", xlab="Harvested Year (Year)", ylab="Wine quality (unit)",col=c(1,2)[latour$Rain+1],pch=c(20,5)[latour$Rain+1])
qmod<-lm(Quality~EndofHarvest+Rain, data=latour)
summary(qmod)
par(mfrow=c(2,2))
plot(qmod)
apply(qmod$bootEstParam, 2, summary)
tcrit<-qt(0.99,df=41)
coef(qmod)[2]-tcrit*coef(summary(qmod))[2,2]
coef(qmod)[2]+tcrit*coef(summary(qmod))[2,2]
coef(qmod)[1]-tcrit*coef(summary(qmod))[1,2]
coef(qmod)[1]+tcrit*coef(summary(qmod))[1,2]
coef(qmod)[1]-tcrit*coef(summary(qmod))[1,2]
coef(qmod)[1]+tcrit*coef(summary(qmod))[1,2]
-0.09508856*30+4.647956
-0.01937899*30+7.644705
-0.09508856*30+4.647956
-0.01937899*30+7.644705
par(mfrow=c(2,2))
plot(qmod)
#######################################################
####       CODE FOR CONFIDENCE BAND PLOT           ####
#######################################################
new.x <- seq(min(latour$EndofHarvest), max(latour$EndofHarvest), length=100)
pred <- predict(latour, new=data.frame(EndofHarvest=new.x), interval="conf",
level=.98)
#######################################################
####       CODE FOR CONFIDENCE BAND PLOT           ####
#######################################################
new.x <- seq(min(latour$EndofHarvest), max(latour$EndofHarvest), length=100)
pred <- predict(latour, new=data.frame(EndofHarvest=new.x), interval="conf",
level=.98)
#######################################################
####       CODE FOR CONFIDENCE BAND PLOT           ####
#######################################################
new.x <- seq(min(latour$EndofHarvest), max(latour$EndofHarvest), length=100)
pred <- predict(qmod, new=data.frame(EndofHarvest=new.x), interval="conf",
level=.98)
#######################################################
####       CODE FOR CONFIDENCE BAND PLOT           ####
#######################################################
new.x <- seq(min(latour$EndofHarvest), max(latour$EndofHarvest), length=100)
pred <- predict(qmod, new=data.frame(EndofHarvest=new.x), interval="conf",
level=.98)
#######################################################
####       CODE FOR CONFIDENCE BAND PLOT           ####
#######################################################
new.x <- seq(min(latour$EndofHarvest), max(latour$EndofHarvest), length=100)
par(mfrow=c(1,1))
pred <- predict(sharkMod, new=data.frame(BodyLength=new.x), interval="pred",
level=.98)
#######################################################
####       CODE FOR CONFIDENCE BAND PLOT           ####
#######################################################
new.x <- seq(min(latour$EndofHarvest), max(latour$EndofHarvest), length=100)
pred <- predict(qmod, new=data.frame(EndofHarvest=new.x), interval="conf",
level=.98)
#######################################################
####       CODE FOR CONFIDENCE BAND PLOT           ####
#######################################################
new.x <- seq(min(latour$EndofHarvest), max(latour$EndofHarvest), length=100)
par(mfrow=c(1,1))
pred <- predict(qmod, new=data.frame(EndofHarvest=new.x), interval="pred",
level=.98)
#######################################################
####       CODE FOR CONFIDENCE BAND PLOT           ####
#######################################################
nEndofHarvest<-latour$EndofHarvest[latour$Rain=0]
#######################################################
####       CODE FOR CONFIDENCE BAND PLOT           ####
#######################################################
nEndofHarvest<-latour$EndofHarvest[latour$Rain==0]
new.x <- seq(min(nEndofHarvest), max(nEndofHarvest), length=100)
par(mfrow=c(1,1))
pred <- predict(qmod, new=data.frame(nEndofHarvest=new.x), interval="pred",
level=.98)
#######################################################
####       CODE FOR CONFIDENCE BAND PLOT           ####
#######################################################
nEndofHarvest<-latour$EndofHarvest[latour$Rain==0]
new.x <- seq(min(nEndofHarvest), max(nEndofHarvest), length=100)
par(mfrow=c(1,1))
pred <- predict(qmod, new=data.frame(EndofHarvest=new.x), interval="pred",
level=.98)
#######################################################
####       CODE FOR CONFIDENCE BAND PLOT           ####
#######################################################
nEndofHarvest<-latour$EndofHarvest[latour$Rain==0]
new.x <- seq(min(nEndofHarvest), max(nEndofHarvest), length=100)
par(mfrow=c(1,1))
pred <- predict(qmod, new=data.frame(EndofHarvest=new.x,Rain=0), interval="pred",
level=.98)
#######################################################
####       CODE FOR CONFIDENCE BAND PLOT           ####
#######################################################
new.x <- seq(min(latour$EndofHarvest), max(latour$EndofHarvest), length=100)
pred <- predict(qmod, new=data.frame(EndofHarvest=new.x,Rain=0), interval="conf",
level=.98)
par(mfrow=c(1,1))
pred <- predict(qmod, new=data.frame(EndofHarvest=new.x,Rain=0), interval="pred",
level=.98)
#######################################################
####       CODE FOR CONFIDENCE BAND PLOT           ####
#######################################################
new.x <- seq(min(latour$EndofHarvest), max(latour$EndofHarvest), length=100)
pred <- predict(qmod, new=data.frame(EndofHarvest=new.x,Rain=0), interval="conf",
level=.98)
pred
par(mfrow=c(1,1))
pred <- predict(qmod, new=data.frame(EndofHarvest=new.x,Rain=0), interval="pred",
level=.98)
pred
#######################################################
####       CODE FOR CONFIDENCE BAND PLOT           ####
#######################################################
new.y <- seq(min(latour$Quality), max(latour$Quality), length=100)
pred <- predict(qmod, new=data.frame(EndofHarvest=new.y,Rain=0), interval="conf",
level=.98)
pred
par(mfrow=c(1,1))
pred <- predict(qmod, new=data.frame(EndofHarvest=new.y,Rain=0), interval="pred",
level=.98)
pred
new.y <- seq(min(latour$Quality), max(latour$Quality), length=100)
pred <- predict(qmod, new=data.frame(EndofHarvest=new.y,Rain=0), interval="conf",
level=.98)
new.y <- seq(min(latour$Quality), max(latour$Quality), length=100)
pred <- prediction(qmod, new=data.frame(EndofHarvest=new.y,Rain=0), interval="conf",
level=.98)
new.y <- seq(min(latour$Quality), max(latour$Quality), length=100)
prediction(qmod, new=data.frame(EndofHarvest=new.y,Rain=0), interval="conf",
level=.98)
new.y <- seq(min(latour$Quality), max(latour$Quality), length=100)
predict(qmod, new=data.frame(EndofHarvest=new.y,Rain=0), interval="conf",
level=.98)
new.y <- seq(min(latour$Quality), max(latour$Quality), length=100)
predict(qmod, new=data.frame(EndofHarvest=30,Rain=0), interval="conf",
level=.98)
new.y <- seq(min(latour$Quality), max(latour$Quality), length=100)
predict(qmod, new=data.frame(EndofHarvest=new.y,Rain=0), interval="conf",
level=.98)
new.y <- seq(min(latour$Quality), max(latour$Quality), length=100)
pred <- prediction(qmod, new=data.frame(EndofHarvest=new.y,Rain=0), interval="conf", level=.98)
new.y <- seq(min(latour$Quality), max(latour$Quality), length=100)
pred <- prediction(qmod, new=data.frame(EndofHarvest=new.y,Rain=0), interval="conf", level=.98)
new.y <- seq(min(latour$Quality), max(latour$Quality), length=100)
pred <- predict(qmod, new=data.frame(EndofHarvest=new.y,Rain=0), interval="conf", level=.98)
pred[30,]
new.y <- seq(min(latour$Quality), max(latour$Quality), length=100)
predict(qmod, new=data.frame(EndofHarvest=new.y,Rain=0), interval="conf", level=.98)
setwd('C:/Users/fengr/Desktop/CSSE386 Data Mining/MwP-EnergyUsage') #set to the folder where the data is saved
setwd('C:/Users/fengr/Desktop/CSSE386 Data Mining/MwP-EnergyUsage') #set to the folder where the data is saved
setwd('C:/Users/fengr/Desktop/CSSE386 Data Mining/MwP-EnergyUsage') #set to the folder where the data is saved
setwd('C:/Users/fengr/Desktop/CSSE386_Data_Mining/MwP-EnergyUsage') #set to the folder where the data is saved
setwd('C:/Users/fengr/Desktop/CSSE386_Data_Mining/MwP-EnergyUsage') #set to the folder where the data is saved
setwd('C:/Users/fengr/Desktop/CSSE386_Data_Mining/MwP-EnergyUsage') #set to the folder where the data is saved
setwd('C:/Users/fengr/Desktop/MA 485') #set to the folder where the data is saved
getwd()
setwd('C:/Users/fengr/Desktop/CSSE386_Data_Mining/MwP-EnergyUsage') #set to the folder where the data is saved
getwd()
setwd('C:/Users/fengr/Desktop/CSSE386_Data_Mining/MwP-EnergyUsage') #set to the folder where the data is saved
getwd()
setwd('C:/Users/fengr/Desktop/CSSE386_Data_Mining/MwP-EnergyUsage') #set to the folder where the data is saved
getwd()
setwd('C:/Users/fengr/Desktop/CSSE386_Data_Mining/MwP-EnergyUsage') #set to the folder where the data is saved
getwd()
setwd('C:/Users/fengr/Desktop/CSSE386_Data_Mining/MwP-EnergyUsage') #set to the folder where the data is saved
getwd()
setwd('C:/Users/fengr/Desktop/CSSE386_Data_Mining/DMwP-EnergyUsage') #set to the folder where the data is saved
electricity <- read.csv('electricity.csv', header = TRUE)      #import the data to the R session
getwd()
setwd('C:/Users/fengr/Desktop/CSSE386_Data_Mining/DMwP-EnergyUsage') #set to the folder where the data is saved
electricity <- read.csv('electricity.csv', header = TRUE)      #import the data to the R session
View(electricity)
View(electricity)
View(electricity)
library(alr3)
install.packages("alr4")
pairs((NumberSB)~MedAge+MedHHI+PercWhite,data = data)
library(alr4)
library(MASS)
library(car)
data = read.csv('StarbucksCACity.csv')
pairs((NumberSB)~MedAge+MedHHI+PercWhite,data = data)
pairs(log(NumberSB)~MedAge+MedHHI+PercWhite,data = data)
pairs(sqrt(NumberSB)~MedAge+MedHHI+PercWhite,data = data)
library(alr4)
library(MASS)
library(car)
data = read.csv('BikeSharing.csv')
boxplot((data$casual/data$cnt)~data$yr, xlab="Year(0=2011,1=2012)", ylab="Count of casual rentals / total", main="Distribution of casual rentals / total in 2011&2012")
boxplot(data$casual/data$cnt~data$season, xlab="Season (1=spring,2=summer,3=fall,4=winter)", ylab="Count of casual rentals/total", main="Distribution of casual rentals / total in different seasons")
boxplot(data$casual/data$cnt~data$hr, xlab="Hour", ylab="Count of casual rentals / total", main="Distribution of casual rentals / total in different hours", cex.axis=0.5 )
boxplot(data$casual/data$cnt~data$holiday, xlab="Holiday (0=no, 1=yes)", ylab="Count of casual rentals/total", main="Distribution of casual rentals / total in non-/holiday")
boxplot(data$casual/data$cnt~data$weathersit, xlab="Weather(1=Clean,2=Mist,3=LightSnow,4=HeavyRain)", ylab="Count of casual rentals/total", main="Distribution of casual rentals / total under different weathers")
plot(data$casual/data$cnt, data$temp, xlab="Normalized Temperature(C)", ylab="Count of casual rental / total", main="Distribution of casual rental/total and temperature")
plot(data$casual/data$cnt, data$atemp, xlab="Normalized Feeling Temperature(C)", ylab="Count of casual rental / total", main="Distribution of casual rental/total and feeling temperature")
plot(data$casual/data$cnt, data$hum, xlab="Normalized humidity", ylab="Count of casual rental / total", main="Distribution of casual rental/total and normalized humidity")
plot(data$casual/data$cnt, data$windspeed, xlab="Normalized wind speed", ylab="Count of casual rental / total", main="Distribution of casual rental/total and normalized wind speed")
mod <- glm(data$casual~data$temp*data$season+data$atemp*data$season+data$hum*data$season+data$windspeed*data$season+data$yr+data$holiday+offset(log(data$cnt)), family=poisson)
summary(mod)
pchisq(deviance(mod), df.residual(mod), lower=FALSE)
dp<-sum(residuals(mod, type="pearson")^2)/mod$df.residual
dp
summary(mod, dispersion=dp)
library(faraway)
halfnorm(residuals(mod))
suppressWarnings(library(alr4))
suppressWarnings(library(MASS))
suppressWarnings(library(car))
suppressWarnings(library(leaps))
suppressWarnings(library(glmnet))
spamEmail = read.csv('spamEmail.csv')
spamEmail <- spamEmail[,c(-1,-56,-57)]
plot(spamEmail$word_freq_credit, spamEmail$capital_run_length_total, pch=c(19,5)[spamEmail$spamInd+1],
main="Word Freq of your vs. Sum of capital letters", xlab="Word frequency of word credit (%)", ylab="Sum of length of capital letters", cex.main=0.8)
legend("topright", c("Not spam", "Spam"), pch=c(19, 5), cex=1)
Spam <- spamEmail[spamEmail$spamInd == 1,]
NotSpam <- spamEmail[spamEmail$spamInd == 0,]
summary(Spam)
summary(NotSpam)
##Set up Training and Test Samples ##
set.seed(888)
proportionTraining <- .70 #What proportion of the data should be in training?
trainingIndices <- sample(seq(1, dim(Spam)[1]), size=.7*dim(Spam)[1])
trainingSpam<-Spam[trainingIndices,]
testSpam<-Spam[-trainingIndices,]
trainingNotSpam<-NotSpam[trainingIndices,]
testNotSpam<-NotSpam[-trainingIndices,]
trainingSet<-merge(trainingNotSpam,trainingSpam,all=TRUE)
testSet<-merge(testNotSpam,testSpam,all=TRUE)
##Fit a model on the training data ##
Q1Mod <- lm(capital_run_length_total~., data=trainingSet)
summary(Q1Mod)
## Define a function to automatically calculate RMSE ##
rmse <- function(response, predicted){sqrt(mean((response-predicted)^2))}
rmse(trainingSet$capital_run_length_total, fitted(Q1Mod)) #RMSE in training
rmse(testSet$capital_run_length_total, predict(Q1Mod,testSet))
x <- model.matrix(capital_run_length_total~., data=trainingSet)[,-1]
y<-trainingSet$capital_run_length_total
ridge.mod <- glmnet(x,y,alpha = 0, standardize = FALSE)
#find the best lambda via cross-validation
cv.out <- cv.glmnet(x,y,alpha = 0, standardize = FALSE)
bestlam <- cv.out$lambda.min
bestlam
#make predictions
newX<-model.matrix(capital_run_length_total~., data=testSet)[,-1]
ytest <- testSet$capital_run_length_total
ridge.pred <- predict(ridge.mod, s = bestlam, newx = newX) #test
ridge.pred2 <- predict(ridge.mod, s = bestlam, newx = x) #train
rmse <- function(response, predicted){sqrt(mean((response-predicted)^2))}
rmse(trainingSet$capital_run_length_total, ridge.pred2) #RMSE in training
rmse(testSet$capital_run_length_total, ridge.pred)
predict(ridge.mod, type = "coefficients", s = bestlam)
##LASSO Model##
lasso.mod <- glmnet(x, y, alpha = 1, standardize = FALSE)
#find the best lambda via cross-validation
cv.out2 <- cv.glmnet(x,y,alpha = 1, standardize = FALSE)
bestlam2 <- cv.out2$lambda.min
bestlam2
lasso.pred <- predict(lasso.mod, s = bestlam, newx = newX)
lasso.pred2 <- predict(lasso.mod, s = bestlam, newx = x) #train
rmse <- function(response, predicted){sqrt(mean((response-predicted)^2))}
rmse(trainingSet$capital_run_length_total, lasso.pred2) #RMSE in training
rmse(testSet$capital_run_length_total, lasso.pred) #RMSE in testing
predict(lasso.mod, type = "coefficients", s = bestlam)
getwd()
setwd('C:/Users/fengr/Desktop/CSSE386_Data_Mining/DMwP-EnergyUsage') #set to the folder where the data is saved
electricity <- read.csv('electricity.csv', header = TRUE)      #import the data to the R session
head(electricity)
lm1=lm(electricity$Sources.Purchased~electricity$Sources.Generation)
summary(lm1)
plot(lm1)
Control <- c(18.4, 15.6, 15.9, 15.2, 16.2, 16.9, 16.4, 13.9, 13.3, 18.0)
Deficient <- c(10.9, 11.6, 10.1, 12.4, 10.2, 12.0, 10.1, 11.8, 10.8, 12.9)
Slow <- c(13.8, 18.7, 16.3, 18.0, 17.4, 18.4, 19.5, 18.5, 19.2, 18.1)
Rayleighsample<-c(6.68, 4.79, 12.06, 4.36, 10.67, 2.52, 5.94, 5.94, 7.24, 5.18, 5.76, 5.62, 8.12, 2.65, 7.25, 5.36, 3.69, 4.24, 10.09, 14.97, 8.30, 7.42, 12.40, 12.36, 7.25, 3.36, 6.87, 2.68, 5.21, 6.65)
mean(Rayleighsample)
lm(Rayleighsample~1)
summary(lm(Rayleighsample~1))
plot(lm(Rayleighsample~1))
plot(electricity$Sources.Generation, electricity$Sources.Purchased, main="Relationship Between Net Generation and Purchase of Power (in MGh)",
xlab="Power Generated (MGh) ", ylab="Power Purchased (MGh) ", pch=19)
plot(electricity$Sources.Generation, electricity$Sources.Purchased, main="Relationship Between Net Generation and Purchase of Power (in MGh)",
xlab="1/Power Generated (MGh^-1) ", ylab="Power Purchased (MGh) ", pch=19)
plot(1/electricity$Sources.Generation, electricity$Sources.Purchased, main="Relationship Between Net Generation and Purchase of Power (in MGh)",
xlab="1/Power Generated (MGh^-1) ", ylab="Power Purchased (MGh) ", pch=19)
plot(1/(electricity$Sources.Generation)^2, electricity$Sources.Purchased, main="Relationship Between Net Generation and Purchase of Power (in MGh)",
xlab="1/Power Generated (MGh^-1) ", ylab="Power Purchased (MGh) ", pch=19)
plot(1/(electricity$Sources.Generation)^3, electricity$Sources.Purchased, main="Relationship Between Net Generation and Purchase of Power (in MGh)",
xlab="1/Power Generated (MGh^-1) ", ylab="Power Purchased (MGh) ", pch=19)
plot(1/(electricity$Sources.Generation)^4, electricity$Sources.Purchased, main="Relationship Between Net Generation and Purchase of Power (in MGh)",
xlab="1/Power Generated (MGh^-1) ", ylab="Power Purchased (MGh) ", pch=19)
plot(log(electricity$Sources.Generation), electricity$Sources.Purchased, main="Relationship Between Net Generation and Purchase of Power (in MGh)",
xlab="1/Power Generated (MGh^-1) ", ylab="Power Purchased (MGh) ", pch=19)
plot(1/electricity$Sources.Generation, electricity$Sources.Purchased, main="Relationship Between Net Generation and Purchase of Power (in MGh)",
xlab="1/Power Generated (MGh^-1) ", ylab="Power Purchased (MGh) ", pch=19)
